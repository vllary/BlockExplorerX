import hashlib
import time
from typing import List, Dict

class Transaction:
    def __init__(self, sender, recipient, amount):
        self.sender = sender
        self.recipient = recipient
        self.amount = amount
        self.timestamp = time.time()

    def calculate_hash(self):
        transaction_string = f"{self.sender}{self.recipient}{self.amount}{self.timestamp}"
        return hashlib.sha256(transaction_string.encode()).hexdigest()

    def __str__(self):
        return f"Transaction({self.sender} -> {self.recipient}, Amount: {self.amount})"

class Block:
    def __init__(self, index, previous_hash, timestamp, transactions: List[Transaction], nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.transactions = transactions
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        transaction_hashes = ''.join(tx.calculate_hash() for tx in self.transactions)
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{transaction_hashes}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

    def __str__(self):
        return (f"Block(Index: {self.index}, Previous Hash: {self.previous_hash}, "
                f"Timestamp: {self.timestamp}, Transactions: {len(self.transactions)}, "
                f"Nonce: {self.nonce}, Hash: {self.hash})")

class Blockchain:
    def __init__(self, initial_supply):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []
        self.accounts = {"admin": Account("admin", initial_supply)}
        self.create_account("admin", initial_supply)  # Initial admin account with some balance

    def create_genesis_block(self):
        return Block(0, "0", time.time(), [])

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def proof_of_work(self, block):
        while block.hash[:self.difficulty] != '0' * self.difficulty:
            block.nonce += 1
            block.hash = block.calculate_hash()
        return block

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False

            if current_block.previous_hash != previous_block.hash:
                return False

        return True

    def create_account(self, address, initial_balance=0):
        if address not in self.accounts:
            self.accounts[address] = Account(address, initial_balance)
            print(f"Account {address} created with initial balance of {initial_balance}.")
        else:
            print(f"Account {address} already exists.")

    def add_transaction(self, transaction):
        if self.accounts[transaction.sender].balance < transaction.amount:
            print(f"Transaction from {transaction.sender} to {transaction.recipient} failed due to insufficient balance.")
            return False
        self.pending_transactions.append(transaction)
        print(f"Transaction added: {transaction}")
        return True

    def mine_block(self):
        if not self.pending_transactions:
            print("No transactions to mine.")
            return

        new_block = Block(len(self.chain), self.get_latest_block().hash, time.time(), self.pending_transactions)
        mined_block = self.proof_of_work(new_block)
        self.add_block(mined_block)
        self.pending_transactions = []
        print(f"Block mined: {mined_block}")

    def get_block_by_index(self, index):
        if index < len(self.chain):
            return self.chain[index]
        else:
            print("Block index out of range.")
            return None

    def get_block_by_hash(self, hash_value):
        for block in self.chain:
            if block.hash == hash_value:
                return block
        print("Block hash not found.")
        return None

    def get_transactions_by_block_index(self, index):
        block = self.get_block_by_index(index)
        if block:
            return block.transactions
        return []

    def get_account_balance(self, address):
        if address in self.accounts:
            return self.accounts[address].balance
        print(f"Account {address} not found.")
        return 0

class Account:
    def __init__(self, address, initial_balance=0):
        self.address = address
        self.balance = initial_balance

    def __str__(self):
        return f"Account(Address: {self.address}, Balance: {self.balance})"

# Example Usage
blockchain = Blockchain(initial_supply=1000)

# Create accounts
blockchain.create_account("alice", 500)
blockchain.create_account("bob", 300)

# Add transactions
blockchain.add_transaction(Transaction("admin", "alice", 100))
blockchain.add_transaction(Transaction("alice", "bob", 50))

# Mine a block
blockchain.mine_block()

# Print blockchain
print("\nBlockchain:")
for block in blockchain.chain:
    print(block)
    for tx in block.transactions:
        print(f"  {tx}")

# Get block by index
print("\nBlock at index 1:")
block = blockchain.get_block_by_index(1)
if block:
    print(block)
    for tx in block.transactions:
        print(f"  {tx}")

# Get block by hash
print("\nBlock by hash:")
block_hash = blockchain.chain[1].hash
block = blockchain.get_block_by_hash(block_hash)
if block:
    print(block)
    for tx in block.transactions:
        print(f"  {tx}")

# Check account balances
print("\nAccount Balances:")
print(f"Alice's Balance: {blockchain.get_account_balance('alice')}")
print(f"Bob's Balance: {blockchain.get_account_balance('bob')}")
print(f"Admin's Balance: {blockchain.get_account_balance('admin')}")
